<?php

use Illuminate\Support\Facades\Redis;

class MsgTeam extends BaseModel
{

    /**
     * The database table used by the model.
     *
     * @var string
     */
    protected $table = 'message_team';
    protected $softDelete = true;
    public static $resourceName = 'MsgTeam';
    public static $mainParamColumn = 'receiver_id';
    static $iCount=100;

    const TYPE_TO_PARENT = 1;
    const TYPE_TO_CHILDREN = 2;

    public static $rules = [
        'received_id' => 'integer',
        'parent_id' => 'integer',
//        'parent' => 'required|max:16',
        'sender_id' => 'integer',
        'sender' => 'required|max:16',
        'type_id' => 'integer|max:10',
        'content' => 'required|max:255',
        'created_at' => 'required',
        'updated_at' => 'required',

    ];
    protected $fillable = [
        'received_id',
        'sender_id',
        'sender',
        'parent_id',
        'type_id',
        'content',
        'created_at',
        'updated_at',
    ];
    /*public static $columnForList = [
        'receiver',
        'sender',
        'msg_title',
        'is_keep',
        'deleted_at',
        'readed_at',
    ];*/

    /**
     * order by config
     * @var array
     */
    public $orderColumns = [
        'updated_at' => 'desc'
    ];
//    public static $aDeletedStatus = ['未删', '已删'];
//    public static $aReadedStatus = ['未读', '已读'];
//    public static $ignoreColumnsInView = ['receiver_id', 'sender_id', 'msg_id', 'type_id', 'is_keep', 'is_to_all', 'is_readed', 'is_deleted', 'updated_at'];

    public static function & getListOfPage($iUserId, $iPage = 1, $iPageSize = 20)
    {
        $redis = Redis::connection();
        $sKey = static::compileListCacheKey($iUserId);
        if (!$bHasInRedis = $redis->exists($sKey)) {
            static::createListCache($iUserId, $iPage);
        }
        $aArticlesFromRedis = $redis->lrange($sKey, 0, $redis->llen($sKey) - 1);
        $aArticles = [];
        foreach ($aArticlesFromRedis as $sArticle) {
            $obj = new static;
            $obj = $obj->newFromBuilder(json_decode($sArticle, true));
            $aArticles[] = $obj;
        }
        unset($aArticlesFromRedis, $obj, $sKey, $redis);
        return $aArticles;
    }

    /**
     * 获取指定用户的站内信
     * @param int $iUserId 用户id
     */
    public static function & getLatestRecords($iUserId = null, $iCount = 6)
    {
        $aUserMsgs = $aFirstUserMsgs = &static::getListOfPage($iUserId, 1) ? array_slice($aFirstUserMsgs, 0, $iCount) : [];
        return $aUserMsgs;
    }

    private static function compileListCacheKey($iUserId = null)
    {
        $sKey = static::getCachePrefix(TRUE);
        is_null($iUserId) or $sKey .= $iUserId;
        return $sKey;
    }

    public static function deleteListCache($iUserId)
    {
        $sKey = static::compileListCacheKey($iUserId);
        $redis = Redis::connection();
        $redis->del($sKey);
    }

    public static function createListCache($iUserId, $iPage = 1, $iPageSize = 20)
    {
        $redis = Redis::connection();
        $sKey = static::compileListCacheKey($iUserId);
        $aColumns = ['id', 'msg_title', 'is_readed', 'created_at'];
        $iStart = ($iPage - 1) * $iPageSize;
        $oUserMsgs = static::where('receiver_id', '=', $iUserId)->where('is_deleted', 0)->orderBy('created_at', 'desc')->skip($iStart)->limit($iPageSize)->get($aColumns);
        $redis->multi();
        $redis->del($sKey);
        foreach ($oUserMsgs as $oUserMsg) {
            $redis->rpush($sKey, json_encode($oUserMsg->toArray()));
        }
        $redis->exec();
    }

    protected function afterSave($oSavedModel)
    {
        parent::afterSave($oSavedModel);
        $oSavedModel->deleteListCache($oSavedModel->receiver_id);
    }

    protected function setParentIdAttribute($iParentId)
    {
//        parent::setParentIdAttribute($iParentId); // TODO: Change the autogenerated stub
        $this->attributes['parent_id'] = $iParentId;
    }


    /**
     * 下级留言
     * 超过24小时的留言清空
     * @author lucky
     * @created_at 2016-10-10
     * @param null $iUserId
     * @param $iCount  message number
     * @return mixed
     */
    static function getChildrenMsg($iUserId, $iCount = 100)
    {
        $redis = Redis::connection();
        $sKey=static::compileChildMsgKey($iUserId, $iCount);
        if (!$aChildrenMsgTeam = $redis->lrange($sKey, 0, $redis->llen($sKey) - 1)) {
            $aChildrenMsgTeam = MsgTeam::WhereRaw("((sender_id=$iUserId and type_id=2) or (parent_id=$iUserId and type_id=1))")
                ->where("created_at", ">=", date("Y-m-d H:i:s", time() - 24 * 3600))
                ->orderBy("id", "desc")
                ->limit($iCount)
                ->get()
                ->toArray();

            $redis->multi();
            foreach ($aChildrenMsgTeam as $key => $sChildrenMsgTeam) {
                $redis->rpush($sKey, json_encode($sChildrenMsgTeam));
            }
            $redis->exec();
        } else {
            foreach ($aChildrenMsgTeam as $key => $sChildrenMsgTeam) {
                $aChildrenMsgTeam[$key] = (array)json_decode($sChildrenMsgTeam);
            }
        }
        return $aChildrenMsgTeam;
    }

    /**
     * 生成下级留言的redis key
     * @author lucky
     * @param $iUserId
     * @param $iCount
     * @return string
     */
    static function compileChildMsgKey($iUserId, $iCount)
    {
        return "childrenMsg" . "-" . $iUserId . "-" . $iCount;
    }


    /**
     * 上级留言
     * @author lucky
     * @created_at 2016-10-10
     * @param null $iUserId
     * @param null $iParentId
     * @param int $iCount message number
     * @return mixed
     */
    static function getParentMsg($iUserId = null, $iParentId = null, $iCount = 100)
    {
        $redis = Redis::connection();
        $sKey=static::compileParentMsgKey($iUserId, $iParentId, $iCount);
        if (!$aParentMsgTeam = $redis->lrange($sKey, 0, $redis->llen($sKey) - 1)) {
            $iParentId = $iParentId ? $iParentId : "null";
            $aParentMsgTeam = MsgTeam::whereRaw("((sender_id = $iUserId and type_id=1) or (sender_id = $iParentId and type_id=2))")
                ->where("created_at", ">=", date("Y-m-d H:i:s", time() - 24 * 3600))
                ->orderBy("id", "desc")
                ->limit($iCount)
                ->get()
                ->toArray();
            $redis->multi();
            foreach ($aParentMsgTeam as $key => $oParentMsgTeam) {
                $redis->rpush($sKey, json_encode($oParentMsgTeam));
            }
            $redis->exec();
        }else{
            foreach ($aParentMsgTeam as $key => $sParentMsgTeam) {
                $aParentMsgTeam[$key] = (array)json_decode($sParentMsgTeam);
            }
        }
        return $aParentMsgTeam;
    }

    /**
     * 生成缓存头缀
     * @param $iUserId
     * @return string
     */
    static function compileParentPrefix($iUserId){
        return "parentMsg". "-" . $iUserId;
    }
    /**
     * 生成上级留言的redis key
     * @param $iUserId
     * @param $iParentId
     * @param $iCount
     * @return string
     */
    static function compileParentMsgKey($iUserId, $iParentId, $iCount)
    {
        return static::compileParentPrefix($iUserId). "-" . $iParentId. "-" . $iCount;
    }

}

